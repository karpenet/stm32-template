
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001180  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001344  08001344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001354  08001354  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001354  08001354  00011354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800135c  0800135c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800135c  0800135c  0001135c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001360  08001360  00011360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001370  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001370  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003bb0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d56  00000000  00000000  00023bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000408  00000000  00000000  00024948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000380  00000000  00000000  00024d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f945  00000000  00000000  000250d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004239  00000000  00000000  00044a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0f9d  00000000  00000000  00048c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00109beb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e84  00000000  00000000  00109c68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800132c 	.word	0x0800132c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800132c 	.word	0x0800132c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 f8fa 	bl	8000700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f802 	bl	8000514 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0xc>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2234      	movs	r2, #52	; 0x34
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fefa 	bl	800131c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <SystemClock_Config+0xb8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a22      	ldr	r2, [pc, #136]	; (80005cc <SystemClock_Config+0xb8>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b20      	ldr	r3, [pc, #128]	; (80005cc <SystemClock_Config+0xb8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000554:	2300      	movs	r3, #0
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <SystemClock_Config+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <SystemClock_Config+0xbc>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <SystemClock_Config+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	2300      	movs	r3, #0
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fc49 	bl	8000e20 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000594:	f000 f81e 	bl	80005d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f9fc 	bl	80009b0 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005be:	f000 f809 	bl	80005d4 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	; 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005da:	e7fe      	b.n	80005da <Error_Handler+0x6>

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_MspInit+0x4c>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <HAL_MspInit+0x4c>)
 80005ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f0:	6453      	str	r3, [r2, #68]	; 0x44
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <HAL_MspInit+0x4c>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_MspInit+0x4c>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <HAL_MspInit+0x4c>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	6413      	str	r3, [r2, #64]	; 0x40
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_MspInit+0x4c>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <NMI_Handler+0x4>

08000632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <MemManage_Handler+0x4>

0800063e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <BusFault_Handler+0x4>

08000644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <UsageFault_Handler+0x4>

0800064a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000678:	f000 f894 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <SystemInit+0x28>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <SystemInit+0x28>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <SystemInit+0x28>)
 8000696:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800069a:	609a      	str	r2, [r3, #8]
#endif
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006b2:	e003      	b.n	80006bc <LoopCopyDataInit>

080006b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006ba:	3104      	adds	r1, #4

080006bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006c4:	d3f6      	bcc.n	80006b4 <CopyDataInit>
  ldr  r2, =_sbss
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006c8:	e002      	b.n	80006d0 <LoopFillZerobss>

080006ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006cc:	f842 3b04 	str.w	r3, [r2], #4

080006d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006d4:	d3f9      	bcc.n	80006ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006d6:	f7ff ffd3 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006da:	f000 fdfb 	bl	80012d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006de:	f7ff ff11 	bl	8000504 <main>
  bx  lr    
 80006e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80006e8:	08001364 	.word	0x08001364
  ldr  r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006f0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80006f4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80006f8:	2000002c 	.word	0x2000002c

080006fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_Init+0x40>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <HAL_Init+0x40>)
 800070a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <HAL_Init+0x40>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <HAL_Init+0x40>)
 8000716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800071a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_Init+0x40>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x40>)
 8000722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f90d 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff ff52 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023c00 	.word	0x40023c00

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f917 	bl	8000996 <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000780:	f000 f8ed 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000028 	.word	0x20000028

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000028 	.word	0x20000028

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000928:	f7ff ff8e 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff47 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff5c 	bl	800082c <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff8e 	bl	800089c <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ffb0 	bl	8000904 <SysTick_Config>
 80009a4:	4603      	mov	r3, r0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e0cc      	b.n	8000b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80009c4:	4b68      	ldr	r3, [pc, #416]	; (8000b68 <HAL_RCC_ClockConfig+0x1b8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 030f 	and.w	r3, r3, #15
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d90c      	bls.n	80009ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d2:	4b65      	ldr	r3, [pc, #404]	; (8000b68 <HAL_RCC_ClockConfig+0x1b8>)
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80009da:	4b63      	ldr	r3, [pc, #396]	; (8000b68 <HAL_RCC_ClockConfig+0x1b8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d001      	beq.n	80009ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e0b8      	b.n	8000b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d020      	beq.n	8000a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a04:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	4a58      	ldr	r2, [pc, #352]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a1c:	4b53      	ldr	r3, [pc, #332]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	4a52      	ldr	r2, [pc, #328]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a28:	4b50      	ldr	r3, [pc, #320]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	494d      	ldr	r1, [pc, #308]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a36:	4313      	orrs	r3, r2
 8000a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d044      	beq.n	8000ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d107      	bne.n	8000a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a4e:	4b47      	ldr	r3, [pc, #284]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d119      	bne.n	8000a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e07f      	b.n	8000b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d003      	beq.n	8000a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d107      	bne.n	8000a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e06f      	b.n	8000b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a7e:	4b3b      	ldr	r3, [pc, #236]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e067      	b.n	8000b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a8e:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	f023 0203 	bic.w	r2, r3, #3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	4934      	ldr	r1, [pc, #208]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000aa0:	f7ff fe94 	bl	80007cc <HAL_GetTick>
 8000aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000aa6:	e00a      	b.n	8000abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa8:	f7ff fe90 	bl	80007cc <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e04f      	b.n	8000b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 020c 	and.w	r2, r3, #12
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d1eb      	bne.n	8000aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <HAL_RCC_ClockConfig+0x1b8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d20c      	bcs.n	8000af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <HAL_RCC_ClockConfig+0x1b8>)
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <HAL_RCC_ClockConfig+0x1b8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d001      	beq.n	8000af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e032      	b.n	8000b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4916      	ldr	r1, [pc, #88]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d009      	beq.n	8000b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	490e      	ldr	r1, [pc, #56]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b32:	4313      	orrs	r3, r2
 8000b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b36:	f000 f821 	bl	8000b7c <HAL_RCC_GetSysClockFreq>
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_RCC_ClockConfig+0x1bc>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	091b      	lsrs	r3, r3, #4
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_RCC_ClockConfig+0x1c0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <HAL_RCC_ClockConfig+0x1c4>)
 8000b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_RCC_ClockConfig+0x1c8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fdf4 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023c00 	.word	0x40023c00
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	08001344 	.word	0x08001344
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b96:	4b9f      	ldr	r3, [pc, #636]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	2b0c      	cmp	r3, #12
 8000ba0:	f200 8130 	bhi.w	8000e04 <HAL_RCC_GetSysClockFreq+0x288>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <HAL_RCC_GetSysClockFreq+0x30>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000be1 	.word	0x08000be1
 8000bb0:	08000e05 	.word	0x08000e05
 8000bb4:	08000e05 	.word	0x08000e05
 8000bb8:	08000e05 	.word	0x08000e05
 8000bbc:	08000be7 	.word	0x08000be7
 8000bc0:	08000e05 	.word	0x08000e05
 8000bc4:	08000e05 	.word	0x08000e05
 8000bc8:	08000e05 	.word	0x08000e05
 8000bcc:	08000bed 	.word	0x08000bed
 8000bd0:	08000e05 	.word	0x08000e05
 8000bd4:	08000e05 	.word	0x08000e05
 8000bd8:	08000e05 	.word	0x08000e05
 8000bdc:	08000cfb 	.word	0x08000cfb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000be0:	4b8d      	ldr	r3, [pc, #564]	; (8000e18 <HAL_RCC_GetSysClockFreq+0x29c>)
 8000be2:	613b      	str	r3, [r7, #16]
       break;
 8000be4:	e111      	b.n	8000e0a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000be6:	4b8d      	ldr	r3, [pc, #564]	; (8000e1c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000be8:	613b      	str	r3, [r7, #16]
      break;
 8000bea:	e10e      	b.n	8000e0a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bec:	4b89      	ldr	r3, [pc, #548]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bf4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf6:	4b87      	ldr	r3, [pc, #540]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d023      	beq.n	8000c4a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c02:	4b84      	ldr	r3, [pc, #528]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	099b      	lsrs	r3, r3, #6
 8000c08:	f04f 0400 	mov.w	r4, #0
 8000c0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	ea03 0501 	and.w	r5, r3, r1
 8000c18:	ea04 0602 	and.w	r6, r4, r2
 8000c1c:	4a7f      	ldr	r2, [pc, #508]	; (8000e1c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000c1e:	fb02 f106 	mul.w	r1, r2, r6
 8000c22:	2200      	movs	r2, #0
 8000c24:	fb02 f205 	mul.w	r2, r2, r5
 8000c28:	440a      	add	r2, r1
 8000c2a:	497c      	ldr	r1, [pc, #496]	; (8000e1c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000c2c:	fba5 0101 	umull	r0, r1, r5, r1
 8000c30:	1853      	adds	r3, r2, r1
 8000c32:	4619      	mov	r1, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f04f 0400 	mov.w	r4, #0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4623      	mov	r3, r4
 8000c3e:	f7ff fae1 	bl	8000204 <__aeabi_uldivmod>
 8000c42:	4603      	mov	r3, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e049      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4a:	4b72      	ldr	r3, [pc, #456]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	099b      	lsrs	r3, r3, #6
 8000c50:	f04f 0400 	mov.w	r4, #0
 8000c54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	ea03 0501 	and.w	r5, r3, r1
 8000c60:	ea04 0602 	and.w	r6, r4, r2
 8000c64:	4629      	mov	r1, r5
 8000c66:	4632      	mov	r2, r6
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	f04f 0400 	mov.w	r4, #0
 8000c70:	0154      	lsls	r4, r2, #5
 8000c72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000c76:	014b      	lsls	r3, r1, #5
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4622      	mov	r2, r4
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	eb62 0206 	sbc.w	r2, r2, r6
 8000c82:	f04f 0300 	mov.w	r3, #0
 8000c86:	f04f 0400 	mov.w	r4, #0
 8000c8a:	0194      	lsls	r4, r2, #6
 8000c8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000c90:	018b      	lsls	r3, r1, #6
 8000c92:	1a5b      	subs	r3, r3, r1
 8000c94:	eb64 0402 	sbc.w	r4, r4, r2
 8000c98:	f04f 0100 	mov.w	r1, #0
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	00e2      	lsls	r2, r4, #3
 8000ca2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000ca6:	00d9      	lsls	r1, r3, #3
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4614      	mov	r4, r2
 8000cac:	195b      	adds	r3, r3, r5
 8000cae:	eb44 0406 	adc.w	r4, r4, r6
 8000cb2:	f04f 0100 	mov.w	r1, #0
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	02a2      	lsls	r2, r4, #10
 8000cbc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000cc0:	0299      	lsls	r1, r3, #10
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4614      	mov	r4, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	4621      	mov	r1, r4
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f04f 0400 	mov.w	r4, #0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	f7ff fa96 	bl	8000204 <__aeabi_uldivmod>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	460c      	mov	r4, r1
 8000cdc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000cde:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	0c1b      	lsrs	r3, r3, #16
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	3301      	adds	r3, #1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	613b      	str	r3, [r7, #16]
      break;
 8000cf8:	e087      	b.n	8000e0a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cfa:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d02:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d04:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d023      	beq.n	8000d58 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d10:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	099b      	lsrs	r3, r3, #6
 8000d16:	f04f 0400 	mov.w	r4, #0
 8000d1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	ea03 0501 	and.w	r5, r3, r1
 8000d26:	ea04 0602 	and.w	r6, r4, r2
 8000d2a:	4a3c      	ldr	r2, [pc, #240]	; (8000e1c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000d2c:	fb02 f106 	mul.w	r1, r2, r6
 8000d30:	2200      	movs	r2, #0
 8000d32:	fb02 f205 	mul.w	r2, r2, r5
 8000d36:	440a      	add	r2, r1
 8000d38:	4938      	ldr	r1, [pc, #224]	; (8000e1c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000d3a:	fba5 0101 	umull	r0, r1, r5, r1
 8000d3e:	1853      	adds	r3, r2, r1
 8000d40:	4619      	mov	r1, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f04f 0400 	mov.w	r4, #0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	f7ff fa5a 	bl	8000204 <__aeabi_uldivmod>
 8000d50:	4603      	mov	r3, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	e049      	b.n	8000dec <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	099b      	lsrs	r3, r3, #6
 8000d5e:	f04f 0400 	mov.w	r4, #0
 8000d62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	ea03 0501 	and.w	r5, r3, r1
 8000d6e:	ea04 0602 	and.w	r6, r4, r2
 8000d72:	4629      	mov	r1, r5
 8000d74:	4632      	mov	r2, r6
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	f04f 0400 	mov.w	r4, #0
 8000d7e:	0154      	lsls	r4, r2, #5
 8000d80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d84:	014b      	lsls	r3, r1, #5
 8000d86:	4619      	mov	r1, r3
 8000d88:	4622      	mov	r2, r4
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	eb62 0206 	sbc.w	r2, r2, r6
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	f04f 0400 	mov.w	r4, #0
 8000d98:	0194      	lsls	r4, r2, #6
 8000d9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000d9e:	018b      	lsls	r3, r1, #6
 8000da0:	1a5b      	subs	r3, r3, r1
 8000da2:	eb64 0402 	sbc.w	r4, r4, r2
 8000da6:	f04f 0100 	mov.w	r1, #0
 8000daa:	f04f 0200 	mov.w	r2, #0
 8000dae:	00e2      	lsls	r2, r4, #3
 8000db0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000db4:	00d9      	lsls	r1, r3, #3
 8000db6:	460b      	mov	r3, r1
 8000db8:	4614      	mov	r4, r2
 8000dba:	195b      	adds	r3, r3, r5
 8000dbc:	eb44 0406 	adc.w	r4, r4, r6
 8000dc0:	f04f 0100 	mov.w	r1, #0
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	02a2      	lsls	r2, r4, #10
 8000dca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000dce:	0299      	lsls	r1, r3, #10
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4614      	mov	r4, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f04f 0400 	mov.w	r4, #0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4623      	mov	r3, r4
 8000de2:	f7ff fa0f 	bl	8000204 <__aeabi_uldivmod>
 8000de6:	4603      	mov	r3, r0
 8000de8:	460c      	mov	r4, r1
 8000dea:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x298>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	0f1b      	lsrs	r3, r3, #28
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e00:	613b      	str	r3, [r7, #16]
      break;
 8000e02:	e002      	b.n	8000e0a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <HAL_RCC_GetSysClockFreq+0x29c>)
 8000e06:	613b      	str	r3, [r7, #16]
      break;
 8000e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e0a:	693b      	ldr	r3, [r7, #16]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e14:	40023800 	.word	0x40023800
 8000e18:	00f42400 	.word	0x00f42400
 8000e1c:	017d7840 	.word	0x017d7840

08000e20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 8083 	beq.w	8000f40 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e3a:	4b95      	ldr	r3, [pc, #596]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d019      	beq.n	8000e7a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e46:	4b92      	ldr	r3, [pc, #584]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d106      	bne.n	8000e60 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e52:	4b8f      	ldr	r3, [pc, #572]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e5e:	d00c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e60:	4b8b      	ldr	r3, [pc, #556]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e68:	2b0c      	cmp	r3, #12
 8000e6a:	d112      	bne.n	8000e92 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e6c:	4b88      	ldr	r3, [pc, #544]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e78:	d10b      	bne.n	8000e92 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7a:	4b85      	ldr	r3, [pc, #532]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d05b      	beq.n	8000f3e <HAL_RCC_OscConfig+0x11e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d157      	bne.n	8000f3e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e216      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9a:	d106      	bne.n	8000eaa <HAL_RCC_OscConfig+0x8a>
 8000e9c:	4b7c      	ldr	r3, [pc, #496]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a7b      	ldr	r2, [pc, #492]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e01d      	b.n	8000ee6 <HAL_RCC_OscConfig+0xc6>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb2:	d10c      	bne.n	8000ece <HAL_RCC_OscConfig+0xae>
 8000eb4:	4b76      	ldr	r3, [pc, #472]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a75      	ldr	r2, [pc, #468]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b73      	ldr	r3, [pc, #460]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a72      	ldr	r2, [pc, #456]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e00b      	b.n	8000ee6 <HAL_RCC_OscConfig+0xc6>
 8000ece:	4b70      	ldr	r3, [pc, #448]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a6f      	ldr	r2, [pc, #444]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b6d      	ldr	r3, [pc, #436]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a6c      	ldr	r2, [pc, #432]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d013      	beq.n	8000f16 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eee:	f7ff fc6d 	bl	80007cc <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fc69 	bl	80007cc <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e1db      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f08:	4b61      	ldr	r3, [pc, #388]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0xd6>
 8000f14:	e014      	b.n	8000f40 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f16:	f7ff fc59 	bl	80007cc <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fc55 	bl	80007cc <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e1c7      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f30:	4b57      	ldr	r3, [pc, #348]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1f0      	bne.n	8000f1e <HAL_RCC_OscConfig+0xfe>
 8000f3c:	e000      	b.n	8000f40 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d06f      	beq.n	800102c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f4c:	4b50      	ldr	r3, [pc, #320]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d017      	beq.n	8000f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d105      	bne.n	8000f70 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f78:	2b0c      	cmp	r3, #12
 8000f7a:	d11c      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f7c:	4b44      	ldr	r3, [pc, #272]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d116      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f88:	4b41      	ldr	r3, [pc, #260]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x180>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d001      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e18f      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4938      	ldr	r1, [pc, #224]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb4:	e03a      	b.n	800102c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d020      	beq.n	8001000 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fbe:	4b35      	ldr	r3, [pc, #212]	; (8001094 <HAL_RCC_OscConfig+0x274>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc02 	bl	80007cc <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fbfe 	bl	80007cc <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e170      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4925      	ldr	r1, [pc, #148]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
 8000ffe:	e015      	b.n	800102c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_RCC_OscConfig+0x274>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fbe1 	bl	80007cc <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fbdd 	bl	80007cc <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e14f      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d037      	beq.n	80010a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d016      	beq.n	800106e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_RCC_OscConfig+0x278>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001046:	f7ff fbc1 	bl	80007cc <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104e:	f7ff fbbd 	bl	80007cc <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e12f      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_RCC_OscConfig+0x270>)
 8001062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x22e>
 800106c:	e01c      	b.n	80010a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_RCC_OscConfig+0x278>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001074:	f7ff fbaa 	bl	80007cc <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107a:	e00f      	b.n	800109c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fba6 	bl	80007cc <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d908      	bls.n	800109c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e118      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	42470000 	.word	0x42470000
 8001098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109c:	4b8a      	ldr	r3, [pc, #552]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 800109e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e9      	bne.n	800107c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 8097 	beq.w	80011e4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ba:	4b83      	ldr	r3, [pc, #524]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10f      	bne.n	80010e6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b7f      	ldr	r3, [pc, #508]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a7e      	ldr	r2, [pc, #504]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b7c      	ldr	r3, [pc, #496]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010e2:	2301      	movs	r3, #1
 80010e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e6:	4b79      	ldr	r3, [pc, #484]	; (80012cc <HAL_RCC_OscConfig+0x4ac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d118      	bne.n	8001124 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f2:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_RCC_OscConfig+0x4ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a75      	ldr	r2, [pc, #468]	; (80012cc <HAL_RCC_OscConfig+0x4ac>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fb65 	bl	80007cc <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001106:	f7ff fb61 	bl	80007cc <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e0d3      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001118:	4b6c      	ldr	r3, [pc, #432]	; (80012cc <HAL_RCC_OscConfig+0x4ac>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x31a>
 800112c:	4b66      	ldr	r3, [pc, #408]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 800112e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001130:	4a65      	ldr	r2, [pc, #404]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6713      	str	r3, [r2, #112]	; 0x70
 8001138:	e01c      	b.n	8001174 <HAL_RCC_OscConfig+0x354>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b05      	cmp	r3, #5
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x33c>
 8001142:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 8001144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001146:	4a60      	ldr	r2, [pc, #384]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6713      	str	r3, [r2, #112]	; 0x70
 800114e:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 8001150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001152:	4a5d      	ldr	r2, [pc, #372]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6713      	str	r3, [r2, #112]	; 0x70
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0x354>
 800115c:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 800115e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001160:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	6713      	str	r3, [r2, #112]	; 0x70
 8001168:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 800116a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800116c:	4a56      	ldr	r2, [pc, #344]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 800116e:	f023 0304 	bic.w	r3, r3, #4
 8001172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d015      	beq.n	80011a8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117c:	f7ff fb26 	bl	80007cc <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001182:	e00a      	b.n	800119a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001184:	f7ff fb22 	bl	80007cc <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e092      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119a:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 800119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0ee      	beq.n	8001184 <HAL_RCC_OscConfig+0x364>
 80011a6:	e014      	b.n	80011d2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a8:	f7ff fb10 	bl	80007cc <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b0:	f7ff fb0c 	bl	80007cc <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e07c      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80011c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ee      	bne.n	80011b0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d105      	bne.n	80011e4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d8:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a3a      	ldr	r2, [pc, #232]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80011de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d068      	beq.n	80012be <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d060      	beq.n	80012ba <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d145      	bne.n	800128c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001200:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <HAL_RCC_OscConfig+0x4b0>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001206:	f7ff fae1 	bl	80007cc <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120e:	f7ff fadd 	bl	80007cc <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e04f      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f0      	bne.n	800120e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69da      	ldr	r2, [r3, #28]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	019b      	lsls	r3, r3, #6
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	085b      	lsrs	r3, r3, #1
 8001244:	3b01      	subs	r3, #1
 8001246:	041b      	lsls	r3, r3, #16
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	061b      	lsls	r3, r3, #24
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	071b      	lsls	r3, r3, #28
 8001258:	491b      	ldr	r1, [pc, #108]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_RCC_OscConfig+0x4b0>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fab2 	bl	80007cc <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff faae 	bl	80007cc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e020      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x44c>
 800128a:	e018      	b.n	80012be <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_RCC_OscConfig+0x4b0>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001292:	f7ff fa9b 	bl	80007cc <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fa97 	bl	80007cc <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e009      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_RCC_OscConfig+0x4a8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f0      	bne.n	800129a <HAL_RCC_OscConfig+0x47a>
 80012b8:	e001      	b.n	80012be <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000
 80012d0:	42470060 	.word	0x42470060

080012d4 <__libc_init_array>:
 80012d4:	b570      	push	{r4, r5, r6, lr}
 80012d6:	4e0d      	ldr	r6, [pc, #52]	; (800130c <__libc_init_array+0x38>)
 80012d8:	4c0d      	ldr	r4, [pc, #52]	; (8001310 <__libc_init_array+0x3c>)
 80012da:	1ba4      	subs	r4, r4, r6
 80012dc:	10a4      	asrs	r4, r4, #2
 80012de:	2500      	movs	r5, #0
 80012e0:	42a5      	cmp	r5, r4
 80012e2:	d109      	bne.n	80012f8 <__libc_init_array+0x24>
 80012e4:	4e0b      	ldr	r6, [pc, #44]	; (8001314 <__libc_init_array+0x40>)
 80012e6:	4c0c      	ldr	r4, [pc, #48]	; (8001318 <__libc_init_array+0x44>)
 80012e8:	f000 f820 	bl	800132c <_init>
 80012ec:	1ba4      	subs	r4, r4, r6
 80012ee:	10a4      	asrs	r4, r4, #2
 80012f0:	2500      	movs	r5, #0
 80012f2:	42a5      	cmp	r5, r4
 80012f4:	d105      	bne.n	8001302 <__libc_init_array+0x2e>
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
 80012f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012fc:	4798      	blx	r3
 80012fe:	3501      	adds	r5, #1
 8001300:	e7ee      	b.n	80012e0 <__libc_init_array+0xc>
 8001302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001306:	4798      	blx	r3
 8001308:	3501      	adds	r5, #1
 800130a:	e7f2      	b.n	80012f2 <__libc_init_array+0x1e>
 800130c:	0800135c 	.word	0x0800135c
 8001310:	0800135c 	.word	0x0800135c
 8001314:	0800135c 	.word	0x0800135c
 8001318:	08001360 	.word	0x08001360

0800131c <memset>:
 800131c:	4402      	add	r2, r0
 800131e:	4603      	mov	r3, r0
 8001320:	4293      	cmp	r3, r2
 8001322:	d100      	bne.n	8001326 <memset+0xa>
 8001324:	4770      	bx	lr
 8001326:	f803 1b01 	strb.w	r1, [r3], #1
 800132a:	e7f9      	b.n	8001320 <memset+0x4>

0800132c <_init>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	bf00      	nop
 8001330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001332:	bc08      	pop	{r3}
 8001334:	469e      	mov	lr, r3
 8001336:	4770      	bx	lr

08001338 <_fini>:
 8001338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133a:	bf00      	nop
 800133c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800133e:	bc08      	pop	{r3}
 8001340:	469e      	mov	lr, r3
 8001342:	4770      	bx	lr
